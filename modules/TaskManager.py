# modules/TaskManager.py

import json
import time
from algorithm.hillClimbing import solve as hill_clibing_alg_solver
from algorithm.ILP import solve as ilp_solver
from algorithm.greedyRandomized import solve as greedy_randomized_solver
from algorithm.greedyClimbing import solve as greedy_climbing_solver
from algorithm.CSP import solve as csp_solver
from algorithm.engines.CSP_Engine import solve as csp_engine_solver
from algorithm.engines.greedyClimbingEngine import solve as grhc_engine_solver
from algorithm.engines.greedyRandomizedEngine import solve as greedy_randomized_engine_solver
from algorithm.engines.ILPEngine import solve as ilp_solver_engine
from algorithm.ILPv2 import solve as ilp_solver_2
from algorithm.CSPv2 import solve as cspv2_solver

class TaskManager:
    def __init__(self):
        # No futuro, você pode adicionar suporte a múltiplos algoritmos aqui
        # ToDo: this must be converted to a json file that can be dynamically modified
        self.algorithms = {
            "hill climbing": hill_clibing_alg_solver,
            "linear programming": ilp_solver,
            "linear programming 2": ilp_solver_2,
            "ILP Engine": ilp_solver_engine,
            "Greedy Randomized": greedy_randomized_solver,
            "Greedy Randomized Engine": greedy_randomized_engine_solver,
            "Greedy Randomized + Hill Climbing": greedy_climbing_solver,
            "CSP": csp_solver,
            "CSP_ENGINE": csp_engine_solver,
            "GRHC_ENGINE": grhc_engine_solver,
            "CSPv2": cspv2_solver,
        }

    def run_task(self, task_id, title, algorithm_name="CSP Scheduling", vacations=None, minimuns=None, employees=None, maxTime=10, year=None, shifts=2, rules=None):

        if algorithm_name not in self.algorithms:
            raise ValueError(f"Algorithm '{algorithm_name}' not found.")

        print(f"[TaskManager] Executing algorithm '{algorithm_name}' with Task ID: {task_id}")
        algorithm = self.algorithms[algorithm_name]

        if not rules:
            from pathlib import Path
            current_dir = Path(__file__).parent
            rules_path = current_dir /  "rules.json"
            with open(rules_path) as f:
                rules = json.load(f)
                
        if isinstance(rules, dict) and "rules" in rules:
            rules_json = rules
        else:
            rules_json = {"rules": rules}

        if algorithm_name in ["linear programming", "hill climbing", "Greedy Randomized", "Greedy Randomized + Hill Climbing", "CSP", "GRHC_ENGINE", "CSP_ENGINE", "Greedy Randomized Engine", "ILP Engine", "linear programming 2", "CSPv2"]:
            #count how long it takes to execute the algorithm
            start_time = time.time()
            schedule_data = algorithm(vacations=vacations, minimuns=minimuns, employees=employees, maxTime=maxTime, year=year, shifts=shifts, rules=rules_json,)
            end_time = time.time()
            elapsed_time = end_time - start_time
            print(f"[TaskManager] Algorithm '{algorithm_name}' executed in {elapsed_time:.2f} seconds.")
        else:
            schedule_data = algorithm()

        print(f"[TaskManager] Algorithm '{algorithm_name}' successfully finalized.")
        print(f"[TaskManager] Schedule generated by '{algorithm_name}' algorithm")
        return schedule_data, elapsed_time