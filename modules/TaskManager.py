# modules/TaskManager.py

from algorithm.CSP_joao import employee_scheduling
from algorithm.genetic_algorithm import solve as genetic_alg_solver
from algorithm.heuristic_sol_gabi import solve as hill_clibing_alg_solver
from algorithm.ILP import solve as ilp_solver
from algorithm.greedyRandomized import solve as greedy_randomized_solver
from algorithm.greedyClimbing import solve as greedy_climbing_solver
from algorithm.CSP import solve as csp_solver

class TaskManager:
    def __init__(self):
        # No futuro, você pode adicionar suporte a múltiplos algoritmos aqui
        # ToDo: this must be converted to a json file that can be dynamically modified
        self.algorithms = {
            "CSP Scheduling": employee_scheduling,
            "genetic_algorithm": genetic_alg_solver,
            "hill climbing": hill_clibing_alg_solver,
            "linear programming": ilp_solver,
            "Greedy Randomized": greedy_randomized_solver,
            "Greedy Randomized + Hill Climbing": greedy_climbing_solver,
            "CSP": csp_solver
        }

    def run_task(self, task_id, title, algorithm_name="CSP Scheduling",
                 vacations=None,
                 minimuns=None,
                 employees=None,
                 maxTime=10,
                 year=None,
                 shifts=2):
        #print(f"\n[DEBUG] Current employee set:\n{employees}")
        print(f"\n[DEBUG] Vacations received:\n{vacations}")
        print(f"\n[DEBUG] Minimuns received:\n{minimuns}")

        if algorithm_name not in self.algorithms:
            raise ValueError(f"Algorithm '{algorithm_name}' not found.")

        print(f"[TaskManager] Executing algorithm '{algorithm_name}' with Task ID: {task_id}")
        algorithm = self.algorithms[algorithm_name]

        # Verifica assinatura e repassa os argumentos corretamente
        if algorithm_name == "linear programming" or algorithm_name == "hill climbing" or algorithm_name == "Greedy Randomized" or algorithm_name == "Greedy Randomized + Hill Climbing" or algorithm_name == "CSP":
            # Passa vacations, minimuns e employees explicitamente
            schedule_data = algorithm(vacations=vacations, minimuns=minimuns, employees=employees, maxTime=maxTime, year=year, shifts=shifts)
        else:
            # Algoritmos que ainda não usam os argumentos extras
            schedule_data = algorithm()

        print(f"[TaskManager] Algorithm '{algorithm_name}' successfully finalized.")
        print(f"[TaskManager] Schedule generated by '{algorithm_name}' algorithm: {schedule_data}")
        return schedule_data

